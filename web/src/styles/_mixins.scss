
@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

@mixin word-wrap($wrap: break-word) {
  overflow-wrap: $wrap;
  word-wrap: $wrap;

  @if $wrap == break-word {
    word-break: break-all;
  } @else {
    word-break: $wrap;
  }
}

@mixin position($position: relative, $coordinates: null null null null) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  position: $position;
  top:    nth($coordinates, 1);
  right:  nth($coordinates, 2);
  bottom: nth($coordinates, 3);
  left:   nth($coordinates, 4);
}

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin ellipsis($width: 100%) {
  display: inline-block;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

@mixin absoluteCenter() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absoluteCenterX() {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

@mixin absoluteCenterY() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin gradientHorizontal {
  background: #53aed1;
  background: -moz-linear-gradient(left, #53aed1 0%, #68bc86 100%);
  background: -webkit-linear-gradient(left, #53aed1 0%,#68bc86 100%);
  background: linear-gradient(to right, #53aed1 0%,#68bc86 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#53aed1', endColorstr='#68bc86',GradientType=1 );
}

@mixin gradientDiagonal {
  background: #53aed1;
  background: -moz-linear-gradient(-45deg, #53aed1 0%, #68bc86 100%);
  background: -webkit-linear-gradient(-45deg, #53aed1 0%,#68bc86 100%);
  background: linear-gradient(135deg, #53aed1 0%,#68bc86 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#53aed1', endColorstr='#68bc86',GradientType=1 );
}

@mixin placeholder($color) {
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    color: $color;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    color: $color;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    color: $color;
  }
  &:-moz-placeholder { /* Firefox 18- */
    color: $color;
  }
}

@mixin overflowLine ($lineHeight, $numLine) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $numLine; /* number of lines to show */
  line-height: $lineHeight;        /* fallback */
  max-height: $lineHeight*$numLine;       /* fallback */
}

@mixin responsive($media) {
  @if $media == tiny {
    @media only screen and (max-width: 330px) { @content; }
  }
  @else if $media == mobile {
    @media only screen and (max-width: 768px) { @content; }
  }
  @else if $media == tablet { // 1 column
    @media only screen and (max-width: 1023px) { @content; }
  }
  @else if $media == ipadpro { // 2 columns
    @media only screen and (max-width: 1400px) { @content; }
  }
  @else if $media == bigscreen { // 2 columns
    @media only screen and (min-width: 1600px) { @content; }
  }
  @else {
    @media only screen and (max-width: $media) { @content; }
  }
}